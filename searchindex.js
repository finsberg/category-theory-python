Search.setIndex({"docnames": ["README", "about", "category_theory", "index", "modules"], "filenames": ["README.md", "about.md", "category_theory.rst", "index.rst", "modules.rst"], "titles": ["Category Theory for python programmers", "Category theory", "category_theory package", "Welcome to Category Theory for Python programmers\u2019s documentation!", "category_theory"], "terms": {"thi": [0, 2, 3], "i": [0, 1, 2, 3], "my": [0, 3], "attempt": [0, 3], "implement": [0, 2, 3], "some": [0, 1, 3], "common": [0, 1, 3], "structur": [0, 2], "from": [0, 1, 2], "note": [0, 2], "am": 0, "beginn": 0, "us": [0, 1, 2], "repo": 0, "wai": 0, "learn": [0, 3], "topic": 0, "cover": 0, "ar": [0, 1, 2], "x": [0, 1, 2], "monoid": [0, 4], "functor": [0, 4], "progress": 0, "applic": [0, 4], "monad": 0, "list": [0, 2, 4], "might": 0, "more": 0, "detail": 0, "futur": 0, "assess": 0, "manli": 0, "base": [0, 2], "book": 0, "call": [0, 1, 2], "bartosz": 0, "milewski": 0, "podcast": 0, "lambdacast": 0, "also": 0, "platform": 0, "investig": 0, "advanc": 0, "featur": [0, 2], "": 0, "system": 0, "therefor": 0, "onli": 0, "support": 0, "latest": 0, "version": 0, "definit": 0, "capabl": 0, "find": 0, "good": 0, "case": [0, 2], "can": [0, 1, 2], "realli": 0, "corner": 0, "try": 0, "properti": [0, 1], "hypothesi": 0, "me": 0, "about": [0, 1, 2], "concept": [0, 1], "If": [0, 1, 2], "anyon": 0, "great": 0, "you": [0, 1], "spot": [0, 2], "ani": [0, 2, 4], "bug": 0, "mistak": 0, "have": [0, 1, 2], "made": 0, "would": [0, 1, 2], "grate": 0, "could": [0, 1, 2], "file": 0, "an": [0, 1, 2], "issu": 0, "even": 0, "better": [0, 2], "first": [0, 2], "submit": 0, "pr": 0, "probabl": 1, "most": 1, "abstract": [1, 2], "form": 1, "mathemat": 1, "It": 1, "tri": 1, "unit": 1, "all": [1, 2, 4], "area": 1, "turn": 1, "out": 1, "mani": 1, "aris": 1, "differ": 1, "share": 1, "That": 1, "your": 1, "know": 1, "relat": 1, "set": 1, "similar": 1, "logic": 1, "algebra": 1, "programm": 1, "perspect": 1, "interest": 1, "becaus": 1, "we": [1, 2], "studi": 1, "type": [1, 2], "A": [1, 2], "collect": 1, "object": [1, 2], "link": 1, "arrow": 1, "typic": [1, 2], "refer": 1, "morphism": 1, "knowledg": 1, "higher": 1, "exist": [1, 2], "isomorph": 1, "homomorph": 1, "homeomorph": 1, "etc": 1, "In": [1, 2], "regular": 1, "function": [1, 2], "e": [1, 2, 4], "map": [1, 2, 4], "one": [1, 2], "anoth": 1, "There": [1, 2], "two": [1, 2], "axiom": [1, 2], "f": [1, 2], "mapsto": [1, 2], "b": [1, 2], "g": [1, 2], "c": [1, 2], "h": 1, "circ": [1, 2], "composit": [1, 2], "For": [1, 2], "each": [1, 2], "ident": [1, 2, 4], "1_x": 1, "everi": 1, "class": 2, "just": [2, 4], "valu": 2, "sourc": 2, "mayb": [2, 4], "appli": [2, 4], "func": 2, "callabl": 2, "static": 2, "pure": [2, 4], "valid": [2, 4], "none": 2, "paramet": 2, "descript": 2, "atom": [2, 4], "commutativemonoid": [2, 4], "where": 2, "binari": 2, "commut": 2, "abc": 2, "gener": 2, "between": 2, "categori": 2, "program": 2, "sens": 2, "think": 2, "contain": 2, "parameter": 2, "exampl": 2, "queue": 2, "which": 2, "other": 2, "either": 2, "promis": 2, "less": 2, "like": 2, "The": 2, "kei": 2, "someth": 2, "given": 2, "thing": 2, "insid": 2, "our": 2, "ha": 2, "string": [2, 4], "take": 2, "element": 2, "equip": 2, "time": 2, "rightarrow": 2, "follow": 2, "hold": 2, "associ": 2, "interfac": 2, "so": 2, "want": 2, "inherit": 2, "need": 2, "__add__": 2, "__radd__": 2, "requir": 2, "staticmethod": 2, "separ": 2, "semigroup": 2, "presenc": 2, "let": 2, "suppos": 2, "int": 2, "integ": 2, "Then": 2, "possibl": 2, "text": 2, "bool": 2, "begin": 2, "true": 2, "2": 2, "fals": 2, "nmid": 2, "end": 2, "known": 2, "is_even": 2, "1": 2, "3": 2, "lambda": 2, "0": 2, "return": 2, "new": 2, "after": 2, "intplu": [2, 4], "whose": 2, "plu": 2, "intprod": [2, 4], "multipl": 2, "maybeintplu": [2, 4], "option": 2, "mean": 2, "otherwis": 2, "maybeintprod": [2, 4], "str": 2, "concaten": 2, "being": 2, "empti": 2, "compos": [2, 4], "through": 2, "creat": 2, "second": 2, "fold": [2, 4], "lst": 2, "iter": 2, "cl": 2, "togeth": 2, "initi": 2, "should": 2, "squash": 2, "reduct": 2, "foldr": [2, 4], "same": 2, "right": 2, "input": 2, "variabl": 2, "output": 2, "is_noth": [2, 4], "typeguard": 2, "check": 2, "declar": 2, "noth": 2, "er": 2, "make": 2, "typguard": 2, "here": 2, "tell": 2, "checker": 2, "than": 2, "get": 2, "chunkifi": [2, 4], "chunk_siz": 2, "fillvalu": 2, "split": 2, "chunk": 2, "size": 2, "doe": 2, "add": 2, "up": 2, "remain": 2, "number": 2, "put": 2, "those": 2, "place": 2, "when": 2, "default": 2, "4": 2, "5": 2, "1000": 2, "par_fold": [2, 4], "pattern": 3, "category_theori": 3, "packag": [3, 4], "index": 3, "modul": [3, 4], "search": 3, "page": 3, "submodul": 4, "core": 4, "oper": 4, "par_oper": 4, "content": 4}, "objects": {"": [[2, 0, 0, "-", "category_theory"]], "category_theory": [[2, 0, 0, "-", "applicative"], [2, 0, 0, "-", "core"], [2, 3, 1, "", "fold"], [2, 3, 1, "", "foldr"], [2, 0, 0, "-", "functor"], [2, 0, 0, "-", "monoid"], [2, 0, 0, "-", "operations"], [2, 3, 1, "", "par_fold"], [2, 0, 0, "-", "par_operations"]], "category_theory.applicative": [[2, 1, 1, "", "Just"], [2, 1, 1, "", "Maybe"], [2, 1, 1, "", "Validation"], [2, 3, 1, "", "maybe"]], "category_theory.applicative.Just": [[2, 2, 1, "", "apply"]], "category_theory.applicative.Maybe": [[2, 2, 1, "", "pure"]], "category_theory.core": [[2, 1, 1, "", "Applicative"], [2, 1, 1, "", "Atomic"], [2, 1, 1, "", "CommutativeMonoid"], [2, 1, 1, "", "Functor"], [2, 1, 1, "", "Monoid"]], "category_theory.core.Applicative": [[2, 2, 1, "", "apply"], [2, 2, 1, "", "pure"]], "category_theory.core.Functor": [[2, 2, 1, "", "map"]], "category_theory.core.Monoid": [[2, 2, 1, "", "e"]], "category_theory.functor": [[2, 1, 1, "", "Just"], [2, 1, 1, "", "List"], [2, 1, 1, "", "Maybe"], [2, 3, 1, "", "maybe"]], "category_theory.functor.Just": [[2, 2, 1, "", "map"]], "category_theory.functor.List": [[2, 2, 1, "", "map"]], "category_theory.monoid": [[2, 1, 1, "", "All"], [2, 1, 1, "", "Any"], [2, 1, 1, "", "IntPlus"], [2, 1, 1, "", "IntProd"], [2, 1, 1, "", "MaybeIntPlus"], [2, 1, 1, "", "MaybeIntProd"], [2, 1, 1, "", "String"]], "category_theory.monoid.All": [[2, 2, 1, "", "e"]], "category_theory.monoid.Any": [[2, 2, 1, "", "e"]], "category_theory.monoid.IntPlus": [[2, 2, 1, "", "e"]], "category_theory.monoid.IntProd": [[2, 2, 1, "", "e"]], "category_theory.monoid.MaybeIntPlus": [[2, 2, 1, "", "e"]], "category_theory.monoid.MaybeIntProd": [[2, 2, 1, "", "e"]], "category_theory.monoid.String": [[2, 2, 1, "", "e"]], "category_theory.operations": [[2, 3, 1, "", "compose"], [2, 3, 1, "", "fold"], [2, 3, 1, "", "foldr"], [2, 3, 1, "", "identity"], [2, 3, 1, "", "is_nothing"]], "category_theory.par_operations": [[2, 3, 1, "", "chunkify"], [2, 3, 1, "", "fold"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"categori": [0, 1, 3], "theori": [0, 1, 3], "python": [0, 3], "programm": [0, 3], "type": 0, "test": 0, "contribut": 0, "category_theori": [2, 4], "packag": 2, "submodul": 2, "applic": 2, "modul": 2, "core": 2, "functor": 2, "monoid": 2, "oper": 2, "par_oper": 2, "content": 2, "welcom": 3, "": 3, "document": 3, "indic": 3, "tabl": 3}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Category Theory for python programmers": [[0, "category-theory-for-python-programmers"]], "Typing": [[0, "typing"]], "Testing": [[0, "testing"]], "Contributing": [[0, "contributing"]], "Category theory": [[1, "category-theory"]], "Category": [[1, "category"]], "category_theory package": [[2, "category-theory-package"]], "Submodules": [[2, "submodules"]], "category_theory.applicative module": [[2, "module-category_theory.applicative"]], "category_theory.core module": [[2, "module-category_theory.core"]], "category_theory.functor module": [[2, "module-category_theory.functor"]], "category_theory.monoid module": [[2, "module-category_theory.monoid"]], "category_theory.operations module": [[2, "module-category_theory.operations"]], "category_theory.par_operations module": [[2, "module-category_theory.par_operations"]], "Module contents": [[2, "module-category_theory"]], "Welcome to Category Theory for Python programmers\u2019s documentation!": [[3, "welcome-to-category-theory-for-python-programmers-s-documentation"]], "Indices and tables": [[3, "indices-and-tables"]], "category_theory": [[4, "category-theory"]]}, "indexentries": {"all (class in category_theory.monoid)": [[2, "category_theory.monoid.All"]], "any (class in category_theory.monoid)": [[2, "category_theory.monoid.Any"]], "applicative (class in category_theory.core)": [[2, "category_theory.core.Applicative"]], "atomic (class in category_theory.core)": [[2, "category_theory.core.Atomic"]], "commutativemonoid (class in category_theory.core)": [[2, "category_theory.core.CommutativeMonoid"]], "functor (class in category_theory.core)": [[2, "category_theory.core.Functor"]], "intplus (class in category_theory.monoid)": [[2, "category_theory.monoid.IntPlus"]], "intprod (class in category_theory.monoid)": [[2, "category_theory.monoid.IntProd"]], "just (class in category_theory.applicative)": [[2, "category_theory.applicative.Just"]], "just (class in category_theory.functor)": [[2, "category_theory.functor.Just"]], "list (class in category_theory.functor)": [[2, "category_theory.functor.List"]], "maybe (class in category_theory.applicative)": [[2, "category_theory.applicative.Maybe"]], "maybe (class in category_theory.functor)": [[2, "category_theory.functor.Maybe"]], "maybeintplus (class in category_theory.monoid)": [[2, "category_theory.monoid.MaybeIntPlus"]], "maybeintprod (class in category_theory.monoid)": [[2, "category_theory.monoid.MaybeIntProd"]], "monoid (class in category_theory.core)": [[2, "category_theory.core.Monoid"]], "string (class in category_theory.monoid)": [[2, "category_theory.monoid.String"]], "validation (class in category_theory.applicative)": [[2, "category_theory.applicative.Validation"]], "apply() (category_theory.applicative.just method)": [[2, "category_theory.applicative.Just.apply"]], "apply() (category_theory.core.applicative method)": [[2, "category_theory.core.Applicative.apply"]], "category_theory": [[2, "module-category_theory"]], "category_theory.applicative": [[2, "module-category_theory.applicative"]], "category_theory.core": [[2, "module-category_theory.core"]], "category_theory.functor": [[2, "module-category_theory.functor"]], "category_theory.monoid": [[2, "module-category_theory.monoid"]], "category_theory.operations": [[2, "module-category_theory.operations"]], "category_theory.par_operations": [[2, "module-category_theory.par_operations"]], "chunkify() (in module category_theory.par_operations)": [[2, "category_theory.par_operations.chunkify"]], "compose() (in module category_theory.operations)": [[2, "category_theory.operations.compose"]], "e() (category_theory.core.monoid static method)": [[2, "category_theory.core.Monoid.e"]], "e() (category_theory.monoid.all static method)": [[2, "category_theory.monoid.All.e"]], "e() (category_theory.monoid.any static method)": [[2, "category_theory.monoid.Any.e"]], "e() (category_theory.monoid.intplus static method)": [[2, "category_theory.monoid.IntPlus.e"]], "e() (category_theory.monoid.intprod static method)": [[2, "category_theory.monoid.IntProd.e"]], "e() (category_theory.monoid.maybeintplus static method)": [[2, "category_theory.monoid.MaybeIntPlus.e"]], "e() (category_theory.monoid.maybeintprod static method)": [[2, "category_theory.monoid.MaybeIntProd.e"]], "e() (category_theory.monoid.string static method)": [[2, "category_theory.monoid.String.e"]], "fold() (in module category_theory)": [[2, "category_theory.fold"]], "fold() (in module category_theory.operations)": [[2, "category_theory.operations.fold"]], "fold() (in module category_theory.par_operations)": [[2, "category_theory.par_operations.fold"]], "foldr() (in module category_theory)": [[2, "category_theory.foldr"]], "foldr() (in module category_theory.operations)": [[2, "category_theory.operations.foldr"]], "identity() (in module category_theory.operations)": [[2, "category_theory.operations.identity"]], "is_nothing() (in module category_theory.operations)": [[2, "category_theory.operations.is_nothing"]], "map() (category_theory.core.functor method)": [[2, "category_theory.core.Functor.map"]], "map() (category_theory.functor.just method)": [[2, "category_theory.functor.Just.map"]], "map() (category_theory.functor.list method)": [[2, "category_theory.functor.List.map"]], "maybe() (in module category_theory.applicative)": [[2, "category_theory.applicative.maybe"]], "maybe() (in module category_theory.functor)": [[2, "category_theory.functor.maybe"]], "module": [[2, "module-category_theory"], [2, "module-category_theory.applicative"], [2, "module-category_theory.core"], [2, "module-category_theory.functor"], [2, "module-category_theory.monoid"], [2, "module-category_theory.operations"], [2, "module-category_theory.par_operations"]], "par_fold() (in module category_theory)": [[2, "category_theory.par_fold"]], "pure() (category_theory.applicative.maybe static method)": [[2, "category_theory.applicative.Maybe.pure"]], "pure() (category_theory.core.applicative static method)": [[2, "category_theory.core.Applicative.pure"]]}})